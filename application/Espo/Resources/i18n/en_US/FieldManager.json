{
    "labels": {
        "Dynamic Logic": "Dynamic Logic",
        "Name": "Name",
        "Label": "Label",
        "Type": "Type",
        "View Details": "View Details"
    },
    "options": {
        "dateTimeDefault": {
            "": "None",
            "javascript: return this.dateTime.getNow(1);": "Now",
            "javascript: return this.dateTime.getNow(5);": "Now (5m)",
            "javascript: return this.dateTime.getNow(15);": "Now (15m)",
            "javascript: return this.dateTime.getNow(30);": "Now (30m)",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(1, 'hours', 15);": "+1 hour",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(2, 'hours', 15);": "+2 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(3, 'hours', 15);": "+3 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(4, 'hours', 15);": "+4 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(5, 'hours', 15);": "+5 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(6, 'hours', 15);": "+6 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(7, 'hours', 15);": "+7 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(8, 'hours', 15);": "+8 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(9, 'hours', 15);": "+9 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(10, 'hours', 15);": "+10 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(11, 'hours', 15);": "+11 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(12, 'hours', 15);": "+12 hours",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(1, 'days', 15);": "+1 day",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(2, 'days', 15);": "+2 days",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(3, 'days', 15);": "+3 days",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(4, 'days', 15);": "+4 days",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(5, 'days', 15);": "+5 days",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(6, 'days', 15);": "+6 days",
            "javascript: return this.dateTime.getDateTimeShiftedFromNow(1, 'week', 15);": "+1 week"
        },
        "dateDefault": {
            "": "None",
            "javascript: return this.dateTime.getToday();": "Today",
            "javascript: return this.dateTime.getDateShiftedFromToday(1, 'days');": "+1 day",
            "javascript: return this.dateTime.getDateShiftedFromToday(2, 'days');": "+2 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(3, 'days');": "+3 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(4, 'days');": "+4 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(5, 'days');": "+5 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(6, 'days');": "+6 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(7, 'days');": "+7 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(8, 'days');": "+8 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(9, 'days');": "+9 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(10, 'days');": "+10 days",
            "javascript: return this.dateTime.getDateShiftedFromToday(1, 'weeks');": "+1 week",
            "javascript: return this.dateTime.getDateShiftedFromToday(2, 'weeks');": "+2 weeks",
            "javascript: return this.dateTime.getDateShiftedFromToday(3, 'weeks');": "+3 weeks",
            "javascript: return this.dateTime.getDateShiftedFromToday(1, 'months');": "+1 month",
            "javascript: return this.dateTime.getDateShiftedFromToday(2, 'months');": "+2 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(3, 'months');": "+3 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(4, 'months');": "+4 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(5, 'months');": "+5 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(6, 'months');": "+6 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(7, 'months');": "+7 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(8, 'months');": "+8 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(9, 'months');": "+9 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(10, 'months');": "+10 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(11, 'months');": "+11 months",
            "javascript: return this.dateTime.getDateShiftedFromToday(1, 'year');": "+1 year"
        },
        "barcodeType": {
            "EAN13": "EAN-13",
            "EAN8": "EAN-8",
            "EAN5": "EAN-5",
            "EAN2": "EAN-2",
            "UPC": "UPC (A)",
            "UPCE": "UPC (E)",
            "pharmacode": "Pharmacode",
            "QRcode": "QR code"
        },
        "globalRestrictions": {
            "forbidden": "Forbidden",
            "internal": "Internal",
            "onlyAdmin": "Admin-only",
            "readOnly": "Read-only",
            "nonAdminReadOnly": "Non-admin read-only"
        }
    },
    "tooltips": {
        "optionsReference": "Re-use options from another field.",
        "currencyDecimal": "Use the Decimal DB type. In the app, values will be represented as strings. Check this parameter if precision is required.",
        "cutHeight": "A text higher then a specified value will be cut with a 'show more' button displayed.",
        "urlStrip": "Strip a protocol and a trailing slash.",
        "audited": "Updates will be logged in stream.",
        "required": "Field will be mandatory. Can't be left empty.",
        "default": "Value will be set by default upon creating.",
        "min": "Min acceptable value.",
        "max": "Max acceptable value.",
        "seeMoreDisabled": "If not checked then long texts will be shortened.",
        "lengthOfCut": "How long text can be before it will be cut.",
        "maxLength": "Max acceptable length of text.",
        "before": "The date value should be before the date value of the specified field.",
        "after": "The date value should be after the date value of the specified field.",
        "readOnly": "Field value can't be specified by user. But can be calculated by formula.",
        "readOnlyAfterCreate": "The field value can be specified when creating a new record. After that, the field becomes read-only. It can still be calculated by formula.",
        "preview": "Show the preview button. Applicable if Markdown is enabled.",
        "fileAccept": "Which file types to accept. It's possible to add custom items.",
        "barcodeLastChar": "For EAN-13 type.",
        "maxFileSize": "If empty or 0 then no limit.",
        "conversionDisabled": "The currency conversion action won't be applied to this field.",
        "pattern": "A regular expression to check a field value against. Define an expression or select a predefined one.",
        "options": "A list of possible values and their labels.",
        "itemsEditable": "Items can be edited. Applicable only if no options are specified.",
        "optionsArray": "A list of possible values and their labels. If empty, the field will allow entering custom values.",
        "maxCount": "Maximum number of items allowed to be selected.",
        "displayAsList": "Each item in a new line.",
        "optionsVarchar": "A list of autocomplete values.",
        "linkReadOnly": "Field value can't be specified by user. But can be calculated by formula.\n\nIt will also disable the ability to create a related record from relationship panels.",
        "relateOnImport": "When importing with this field, it will automatically relate a record with a matching foreign record. Use this functionality only if the foreign field is considered as unique."
    },
    "fieldParts": {
        "address": {
            "street": "Street",
            "city": "City",
            "state": "State",
            "country": "Country",
            "postalCode": "Postal Code",
            "map": "Map"
        },
        "personName": {
            "salutation": "Salutation",
            "first": "First",
            "middle": "Middle",
            "last": "Last"
        },
        "currency": {
            "converted": "(Converted)",
            "currency": "(Currency)"
        },
        "datetimeOptional": {
            "date": "Date"
        }
    },
    "fieldInfo": {
        "varchar": "A single-line text.",
        "enum": "Selectbox, only one value can be selected.",
        "text": "A multiline text with markdown support.",
        "date": "Date w/o time.",
        "datetime": "Date and time",
        "currency": "A currency value. A float number with a currency code.",
        "int": "A whole number.",
        "float": "A number with a decimal part.",
        "bool": "A checkbox. Two possible values: true and false.",
        "multiEnum": "A list of values, multiple values can be selected. The list is ordered.",
        "checklist": "A list of checkboxes.",
        "array": "A list of values, similar to Multi-Enum field.",
        "address": "An address with street, city, state, postal code and country.",
        "url": "For storing links.",
        "urlMultiple": "Multiple links.",
        "wysiwyg": "A text with HTML support.",
        "file": "For file uploading.",
        "image": "For image uploading.",
        "attachmentMultiple": "Allows to upload multiple files.",
        "number": "An auto-incrementing number of string type with a possible prefix and specific length.",
        "autoincrement": "A generated read-only auto-incrementing integer number.",
        "barcode": "A barcode. Can be printed to PDF.",
        "email": "A set of email addresses with their parameters: Opted-out, Invalid, Primary.",
        "phone": "A set of phone numbers with their parameters: Type, Opted-out, Invalid, Primary.",
        "foreign": "A field of a related record. Read-only.",
        "link": "A record related through Belongs-To (many-to-one or one-to-one) relationship.",
        "linkParent": "A record related through Belongs-To-Parent relationship. Can be of different entity types.",
        "linkMultiple": "A set of records related through Has-Many (many-to-many or one-to-many) relationship. Not all relationships have their link-multiple fields. Only those do, where Link-Multiple parameter(s) is enabled."
    },
    "messages": {
        "fieldCreatedAddToLayouts": "Field has been created. Now, you can add it to [layouts]({link})",
        "confirmRemove": "Are you sure you want to remove the *{field}* field?\n\nField removal does not remove data from the database. Data from the database will be removed if you run hard rebuild.",
        "fieldNameIsNotAllowed": "Field name '{field}' is not allowed.",
        "fieldAlreadyExists": "Field '{field}' already exists in '{entityType}'.",
        "linkWithSameNameAlreadyExists": "Link with the name '{field}' already exists in '{entityType}'.",
        "namingFieldLinkConflict": "Name '{field}' conflicts with link."
    },
    "otherFields": {
        "attributes": "Attributes"
    }
}
